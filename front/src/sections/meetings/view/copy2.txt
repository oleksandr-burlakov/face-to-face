import Peer from "simple-peer";
import React, { useRef, useState, useEffect } from "react"

import { Add } from "@mui/icons-material";
import { Box, Tab, Card, Tabs, Stack, Button, Container, TextField, Typography } from "@mui/material"

import Connector, { userInfo } from 'src/hooks/signalr-connector';



function CustomTabPanel(props : CustomTabPanelPropTypes) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

export type CustomTabPanelPropTypes = {
  children: any,
  index: number,
  value: number,
};

const videoConstraints = {
  height: window.innerHeight / 2,
  width: window.innerWidth / 2
};

type PeerUser = {
  peer: Peer.Instance,
  id: string
};

export function MeetingView() {
  
  const [mediaStream, setMediaStream] = useState<MediaStream | null>();
  const [username, setUsername] = useState('');
  const [peers, setPeers] = useState<PeerUser[]>([]);
  const userVideo = useRef({});

  const joinRoomFunc = (data: userInfo) => {
    informJoinedUser(username, data.connectionId);
  };

  const informUser = (data: userInfo) => {
    if (mediaStream)
    {
      const peer = createPeer(data.connectionId, mediaStream);
      console.log(peer);
      setPeers([...peers, {id: data.connectionId, peer}]);
    }
  };

  const sendSignalFunc = (connectionId: string, incomingSignal: string, isReturning: boolean) => {
    if (isReturning) {
      if (mediaStream)
      {
        const peer = addPeer(incomingSignal, connectionId, mediaStream);
        setPeers([...peers, {id: connectionId, peer}]);
      }
    } else {
      const item = peers.find(p => p.id === connectionId);
      if (item) {
        item.peer.signal(incomingSignal);
      }
    }
  };

  const { joinRoom, sendSignal, informJoinedUser, waitForHubConnection, getConnectionId} = Connector({
    onUserJoinedRoom: joinRoomFunc,
    onInformJoinedUser: informUser,
    onSendSignal: sendSignalFunc,
    onUserDisconnect(connectionId) {
      console.log(connectionId);
    },
  });

  useEffect(() => {
    navigator.mediaDevices.getUserMedia({video: videoConstraints, audio: true}).then((stream) => {
      userVideo.current.srcObject = stream;
      setMediaStream(stream);
    });

      waitForHubConnection().then(() => {
        joinRoom(` `);
      });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    function createPeer(userToSignal: string, stream: MediaStream) {
        const peer = new Peer({
            initiator: true,
            trickle: true,
            stream,
        });

        peer.on('connect', () => {
          peer.send('hi peer2, this is peer1')
        })

        peer.on("signal", signal => {
          sendSignal(signal, userToSignal,  true )
        }) 

        return peer;
    }

    function addPeer(incomingSignal: string, callerID: string, stream: MediaStream) {
        const peer = new Peer({
            initiator: false,
            trickle: true,
            stream,
        })

        peer.on("signal", signal => {
            sendSignal(signal, callerID,  true )
        })

        peer.signal(incomingSignal);

        return peer;
    }


    // const createPeer = (connectionId: string) => {
    //   const peer = new Peer({ enableDataChannels: true });
        
    //   peer.on('streamRemote', (remoteStream) => {
    //     const remoteMediaStream = new MediaStream();
    //     remoteStream.getTracks().forEach((track, index) => {
    //       if (index <= 1) {
    //         console.log('DATA PEER')
    //         remoteMediaStream.addTrack(track);
    //       }
    //     });
    //     setStreamRemote([...streamRemote, remoteMediaStream]);
    //   });
      
    //   peer.on('streamLocal', (localStream) => {
    //     setStreamLocal(localStream);
    //   });
    //   peer.on('onicecandidates', (candidates) => {
    //     sendSignal(JSON.stringify(candidates),connectionId, true);
    //   });
    
    //   peer.on('signal', (description) => {
    //     sendSignal(JSON.stringify(description),connectionId, false);
    //   });

    //   (async () => {
    //     const stream = await Peer.getUserMedia();
    //     peer.addStream(stream);
    //     peer.destroy();
    //     peer.start();
    //   })();

    //   return peer;
    // }

    const [value, setValue] = React.useState(0);
      
      const handleChange = (event: any, newValue: number) => {
        setValue(newValue);
      };

  const createNew = () => {
  };

  return (
    <Container>
      <Stack mb={5}>
        <Typography variant="h4">Meetings</Typography>
      </Stack>
      <Card>
        <Box padding={4}>
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Stack flexDirection='row'>
              <Tabs sx={{width:'100%'}} value={value} onChange={handleChange} centered textColor="secondary" indicatorColor="secondary">
                <Tab label="Active"/>
                <Tab label="Archive"/>
              </Tabs>
              <TextField onChange={(event) => setUsername(event.target.value)}/>
              <Button onClick={createNew} color="secondary" variant="outlined">
                <Add />
              </Button>
            </Stack>
          </Box>
          <CustomTabPanel value={value} index={0}>
            {getConnectionId()}
            {/* <ActiveList /> */}
            <video ref={userVideo} autoPlay muted />
            {
              peers.map((content, i) => (`Item ${i}`))
            }
            {
              peers.map((content, index)=> (
                  <Video key={index} peer={content} />
                ))
            }
          </CustomTabPanel>
          <CustomTabPanel value={value} index={1}>
            List of participants:
            Item Two
          </CustomTabPanel>
        </Box>
      </Card>
    </Container>
  )
}

const Video = ({peer} : {peer: Peer.Instance}) => {
  const ref = useRef();

  useEffect(() => {
      peer.on("stream", stream => {
          ref.current.srcObject = stream;
      })
  }, []);

    return (
      <>
        Item
        <video playsInline autoPlay ref={ref} />
      </>
    );
}

