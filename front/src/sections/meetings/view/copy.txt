import Peer from "peer-lite";
import React, { useRef, useState, useEffect } from "react"

import { Add } from "@mui/icons-material";
import { Box, Tab, Card, Tabs, Stack, Button, Container, TextField, Typography } from "@mui/material"

import Connector, { userInfo } from 'src/hooks/signalr-connector';



function CustomTabPanel(props : CustomTabPanelPropTypes) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

export type CustomTabPanelPropTypes = {
  children: any,
  index: number,
  value: number,
};

const videoConstraints = {
  height: window.innerHeight / 2,
  width: window.innerWidth / 2
};

type PeerUser = {
  peer: Peer,
  id: string
};

export function MeetingView() {
  const [mediaStream, setMediaStream] = useState<MediaStream | null>();
  const [username, setUsername] = useState('');
  const [peers, setPeers] = useState<PeerUser[]>([]);
  const userVideo = useRef({});
  
  const [streamLocal, setStreamLocal] = useState<MediaStream | null>(null);
  const [streamRemote, setStreamRemote] = useState<MediaStream[]>([]);
  
  const userJoinedFunc  = (data: userInfo) => {
    informJoinedUser(username, data.connectionId);
  };
  const informJoinedUserFunc = (data: userInfo) => {
    const conId = data.connectionId;
    if (!peers.filter(x => x.id === conId).length) {
      const peer = createPeer(conId);
      const peerItem: PeerUser = {id: conId, peer };
      setPeers([...peers, peerItem]);
    }
  };
  const sendSignalFunc =(connectionId: string, incomingSignal: string, isReturning: boolean) => {
      if (isReturning) {
        let peer = peers.filter(x => x.id === connectionId)[0]?.peer;
        if (!peer) {
          peer = createPeer(connectionId);
          setPeers([...peers, {id: connectionId, peer}]);
        }

        const promises = JSON.parse(incomingSignal).map(async (candidate) => peer.addIceCandidate(candidate));
        Promise.all(promises);
      } else {
        let peer = peers.filter(x => x.id === connectionId)[0]?.peer;
        if (!peer) {
          peer = createPeer(connectionId);
          setPeers([...peers, {id: connectionId, peer}]);
        }
        console.log(`SIGNAL: ${incomingSignal}`);
        peer.signal(incomingSignal);
      }
    };
  const { joinRoom,  sendSignal, informJoinedUser, waitForHubConnection, getConnectionId} = Connector({
    onUserJoinedRoom: userJoinedFunc,
    onInformJoinedUser: informJoinedUserFunc,
    onSendSignal: sendSignalFunc,
    onUserDisconnect(connectionId) {
        console.log(connectionId);
    },
  });
  useEffect(() => {
    navigator.mediaDevices.getUserMedia({video: videoConstraints, audio: true}).then((stream) => {
      userVideo.current.srcObject = stream;
      setMediaStream(stream);
    });
      waitForHubConnection().then(() => {
        joinRoom(`${Math.random()  }`);
      });
    }, [joinRoom, waitForHubConnection]);

    const createPeer = (connectionId: string) => {
      const peer = new Peer({ enableDataChannels: true });
        
      peer.on('streamRemote', (remoteStream) => {
        setStreamRemote([...streamRemote, remoteStream]);
      });
      
      peer.on('streamLocal', (localStream) => {
        setStreamLocal(localStream);
      });
      peer.on('onicecandidates', (description) => {
        if (description)
          sendSignal(JSON.stringify({description}),connectionId, true);
      });
    
      peer.on('signal', (description) => {
        if (description)
          sendSignal(JSON.stringify({description}),connectionId, false);
      });

      (async () => {
        const stream = await Peer.getUserMedia();
        peer.addStream(stream);
        peer.start();
      })();

      return peer;
    }

    const [value, setValue] = React.useState(0);
      
      const handleChange = (event: any, newValue: number) => {
        setValue(newValue);
      };

  const createNew = () => {
  };

  return (
    <Container>
      <Stack mb={5}>
        <Typography variant="h4">Meetings</Typography>
      </Stack>
      <Card>
        <Box padding={4}>
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Stack flexDirection='row'>
              <Tabs sx={{width:'100%'}} value={value} onChange={handleChange} centered textColor="secondary" indicatorColor="secondary">
                <Tab label="Active"/>
                <Tab label="Archive"/>
              </Tabs>
              <TextField onChange={(event) => setUsername(event.target.value)}/>
              <Button onClick={createNew} color="secondary" variant="outlined">
                <Add />
              </Button>
            </Stack>
          </Box>
          <CustomTabPanel value={value} index={0}>
            {/* <ActiveList /> */}
            {getConnectionId()}
            {
              peers.map((content, i) => (`Item ${i}`))
            }
            {
              streamRemote.map((content, index)=> (
                  <Video key={index} content={content} />
                ))
            }
          </CustomTabPanel>
          <CustomTabPanel value={value} index={1}>
            List of participants:
            Item Two
          </CustomTabPanel>
        </Box>
      </Card>
    </Container>
  )
}

const Video = ({content} : {content: MediaStream}) => {
    const ref = useRef({});

    useEffect(() => {
      ref.current.srcObject = content;
    }, []);

    return (
      <>
        Item
        <video playsInline autoPlay ref={ref} />
      </>
    );
}

